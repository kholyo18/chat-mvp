rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isOwner(uid) {
      return request.auth != null && request.auth.uid == uid;
    }

    match /rooms/{roomId} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn();
      match /messages/{msgId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.text is string && request.resource.data.text.size() > 0;
      }

      match /members/{uid} {
        allow read: if isSignedIn();
        allow create, update: if isSignedIn() && request.auth.uid == uid;
      }

      match /invites/{inviteId} {
        allow read, write: if false;
      }
    }

    match /users/{uid} {
      allow read: if true;
      allow create: if isOwner(uid);
      allow update: if isOwner(uid)
                    && !( 'coins' in request.resource.data.diff(resource.data).changedKeys())
                    && !( 'vipTier' in request.resource.data.diff(resource.data).changedKeys())
                    && !( 'vipSince' in request.resource.data.diff(resource.data).changedKeys())
                    && !( 'verified' in request.resource.data.diff(resource.data).changedKeys());

      match /wallet_transactions/{tid} {
        allow read: if isOwner(uid);
        allow write: if false;
      }

      match /notifications/{doc} {
        allow read, create: if isOwner(uid);
      }
    }

    match /verification_requests/{uid} {
      allow read: if isOwner(uid);
      allow create: if isOwner(uid) && resource == null;
      allow delete: if false;
    }
  }
}
